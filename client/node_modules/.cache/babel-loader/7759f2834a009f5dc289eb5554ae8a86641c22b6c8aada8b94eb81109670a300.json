{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\DI\\\\websites\\\\instasocial\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n  _s = $RefreshSig$();\nimport { formatMs } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport useStyles from \"./styles\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport { userInfo } from \"os\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = _ref => {\n  _s();\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  });\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const user = useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (currentId) {\n      dispatch(updatePost(currentId, postData));\n    } else {\n      dispatch(createPost({\n        ...postData,\n        name: user\n      }));\n    }\n  };\n  const clear = () => {};\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Creating a Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        required: true,\n        onChange: e => setPostData({\n          ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: postData.message,\n        required: true,\n        onChange: e => setPostData({\n          ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        require: true,\n        onChange: e => setPostData({\n          ...postData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          required: true,\n          onDone: _ref2 => {\n            let {\n              base64\n            } = _ref2;\n            return setPostData({\n              ...postData,\n              selectedFile: base64\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"TcmuD4hK6qbBSG8smum16Mtxp54=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["formatMs","React","useEffect","useState","useStyles","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","createPost","updatePost","userInfo","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","classes","dispatch","post","state","posts","find","_id","user","handleSubmit","e","preventDefault","name","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"sources":["C:/Users/hp/Documents/DI/websites/instasocial/client/src/components/Form/Form.js"],"sourcesContent":["import { formatMs } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useStyles from \"./styles\";\r\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\r\nimport FileBase from \"react-file-base64\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createPost , updatePost} from \"../../actions/posts\";\r\nimport { userInfo } from \"os\";\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n  \r\n  const [postData, setPostData] = useState({\r\n    title: \"\",\r\n    message: \"\",\r\n    tags: \"\",\r\n    selectedFile: \"\",\r\n  });\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\r\n  const user = \r\n  useEffect(() => {\r\n    if (post) setPostData(post);\r\n  }, [post]); \r\n\r\n  \r\n  \r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault();\r\n    \r\n    if (currentId) {\r\n      dispatch(updatePost(currentId, postData));\r\n      \r\n    } else {\r\n      \r\n      dispatch(createPost({...postData,name:user}));\r\n      \r\n    }\r\n  };\r\n  const clear = () => {};\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <form\r\n        autoComplete='off'\r\n        noValidate\r\n        className={`${classes.root} ${classes.form}`}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Typography variant='h6'>Creating a Post</Typography>\r\n        \r\n        <TextField\r\n          name='title'\r\n          variant='outlined'\r\n          label='Title'\r\n          fullWidth\r\n          value={postData.title}\r\n          required\r\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\r\n        />\r\n        <TextField\r\n          name='message'\r\n          variant='outlined'\r\n          label='Message'\r\n          fullWidth\r\n          multiline rows={4} \r\n          value={postData.message}\r\n          required\r\n          onChange={(e) =>\r\n            setPostData({ ...postData, message: e.target.value })\r\n          }\r\n        />\r\n        <TextField\r\n          name='tags'\r\n          variant='outlined'\r\n          label='Tags'\r\n          fullWidth\r\n          value={postData.tags}\r\n          require\r\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}\r\n        />\r\n        <div className={classes.fileInput}>\r\n          <FileBase\r\n            type='file'\r\n            multiple={false}\r\n            required\r\n            onDone={({ base64 }) =>\r\n              setPostData({ ...postData, selectedFile: base64 })\r\n            }\r\n          />\r\n        </div>\r\n        <Button\r\n          className={classes.buttonSubmit}\r\n          variant='contained'\r\n          color='primary'\r\n          size='large'\r\n          type='submit'\r\n          fullWidth\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          className={classes.buttonSubmit}\r\n          variant='contained'\r\n          color='secondary'\r\n          size='small'\r\n          onClick={clear}\r\n          fullWidth\r\n        >\r\n          Clear\r\n        </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}